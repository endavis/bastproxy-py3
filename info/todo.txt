# IN PROGRESS
    # BUG: fix reloading/loading - dependencies are broken
    # TODO: update command to update proxy from git
    # TODO: plugin.core.commands
        keep a global count vs instance count of called commands
            useful for when updating commands
        keep track of errors for each command
        create a plugin.core.commands.det to get command details
        make all output look the same for all commands
            toplevel header
            sub header
    # TODO: look at ENUM for flags?
    # TODO: create classes for specific items (mainly dicts) that are structured
        TODO: watches, triggers, plugin stats, etc.
        COMPLETE: events, commands
    # TODO: have a seperate line length for each client, use telnet negotiation
    # TODO: plugin reloading

        don't save plugin_instances
            if you need the instance, save the plugin_id
            and then use the api 'libs.plugins.loader:get:plugin:instance'
        saving instances could lead to a memory leak and stale plugin instances floating around

        # COMPLETE: remove any static imports from a plugin
            things like decorators can be statically imported but should not be reloaded
            any objects used by other plugins should have CANRELOAD = False in them

        NEW Thoughts:
            Decorate functions with info to recreate stuff
            The command plugin now uses decorators and so can easily rebuild the commands for a plugin
            all command data is now kept locally in the command plugin
                What about commands created at runtime like the reset command - put this in the event for that specific plugin initialization
                    there is now an api to change the autoadd flag for a command
            Events does the same for registrations (not for event definitions)

        Plugin folder structure
            if a file should not be reloaded when a plugin is reloaded
                add a CANRELOAD = False line to the file
            Location: plugins.core.events - the main directory
                a "plugin" directory under the main directory
                    this is the location of the plugin class
                    it is recommended to only include modules that are not statically imported by other modules
                        in this directory
                a "libs" directory under the main directory
                    best practice is to expose only those things other plugins need
                        in the plugin's main directory/__init__.py
    # TODO: https://docs.python.org/3/library/collections.html#collections.namedtuple for SQLite queries????
    # TODO: make all apis use similar formats
        IE: plugins.core.commands:add and plugins.core.events:add
        Say it like a sentence, or preface with object it's using
            IE: plugins.core.events:register.to.event or plugins.core.events:event.register
                plugins.core.proxy:get.preamble or plugins.core.proxy:preamble:get
    # TODO: plugins.core.cmdq
        rename to mudcmds????
    # TODO: create other records for tracking things
        can we combine workflows and data to make things easier to track?
        # COMPLETE: create a record tree
            ToMudData
                    |-> EventRecord('ev_to_mud_data_modify')
                        |-> CommandRecord(command)
                            |-> ToClientRecord(command_output)
                    |-> EventRecord('ev_to_mud_data_read')
            ToClientData
                    |-> EventRecord('ev_to_client_data_modify')
                            |-> TriggerRecord()
                                |-> SubstitionRecord
                    |-> EventRecord('ev_to_client_data_read')
        refactor to libs.tracking and libs.records
            with data and workflows (processes)?
            refactor BaseRecord to 3 classes BaseRecord, BaseData, BaseProcess
            libs.tracking.data.BaseData
                uses trackeduserlist (exists) or trackeduserdict (doesn't exist yet) or a singleton like NeworkDataLine
                NetworkDataLine, NetworkData, EventArgsRecord
            libs.tracking.process.BaseProcess
                could track raising events, running commands, triggers, etc
                has an __exec__ method
                ToClientData, ToMudData currently are
                add trigger, command, event process
                the event itself, commands, triggers, timers, callbacks
                the mud itself - a startup global Process that is the default parent?
        could add errors to the record
            for a command, the exception
            for an event, the function that errored with the exception
        COMPLETE: ProcessDataFromMud, ProcessDataFromClient
            ProcessDataFromClient
                will be ToClientData without SendDataToclient
                will only be called from client_read
                SendDataToClient
                    if self.send_to_clients and line.send:
                        line.format(preamble=self.preamble, color=self.color_for_all_lines)

                        clients = self.clients or self.api(
                            'plugins.core.clients:get.all.clients'
                        )(uuid_only=True)
                        for client_uuid in clients:
                            if self.can_send_to_client(client_uuid, line.internal):
                                self.api('plugins.core.clients:send.to.client')(client_uuid, line)
                            else:
                                LogRecord(f"## NOTE: Client {client_uuid} cannot receive message {str(self.uuid)}",
                                        level='debug', sources=[__name__])()

                        if line.is_io:
                            self.api('plugins.core.events:raise.event')(self.read_data_event_name, event_args={'line': line.line})
            ProcessDataFromMud
                will be ToMudData without SendDataToMud
                will only be called from mud_read
                SendDataToMud
                    if line.send:
                        line.format()
                        if mud_connection := self.api('plugins.core.proxy:get.mud.connection')():
                            mud_connection.send_to(line)

                        if line.is_io:
                            self.api('plugins.core.events:raise.event')(self.read_data_event_name, event_args={'line': line.line})
    # TODO: create a help plugin
                for how to use as well as to develop for
    # TODO: can I use the humanize library anywhere?
    # TODO: Discord Bot?
    # TODO: add specific Exceptions
            APINotFoundException
    # TODO: update commands to use tables
        plugins.c.pluginm.list
    # TODO: get rid of all calls to the plugins.core.commands:run api
    # TODO: create a command to show basic stats for a plugin
        For things:
            all triggers that are from the plugin
            etc...
    # TODO: data/internal command, like stats but more detailed
        #bp.c.eve.owner
        #bp.c.comm.list
            except adds function data
        events for specific plugin
        triggers for specific plugin
        apis for specific plugin
        etc
    # TODO: rename plugin hooks initialize???
    # TODO: reconfigure _baseplugin to have a libs dir like other plugins
        put _pluginhooks, _patch in libs
    # TODO: create an internal webserver to get large command output
            such as record details
    # TODO: in ClientConnection, use the telnet_server.duration and .idle for connected time and idle times
    # TODO: command to see details about clients and the mud
        like negotiated telnet options
        idle time
        how many lines, how much data

# IDEAS
    # IDEA: look at hunter for debugging: https://pypi.org/project/hunter/

# BUGS:
    # BUG: reloading a plugin does not reload __init__.py so the below are not updated
        # these 4 are required
        PLUGIN_NAME = 'Trigger testing'
        PLUGIN_PURPOSE = 'testing triggers'
        PLUGIN_AUTHOR = 'Bast'
        PLUGIN_VERSION = 1
    # BUG: evennia intro command doesn't seem to take number, works with regular telnet

# REVISIT:
    # TODO: libs.timing
        DIDNTDO: change decorator to a class?
    # TODO: look at slots
        NOTES: This messes with using __dict__ to format strings
    # TODO: check on plac instead of ArgumentParser
        see if it can do both + and - as arguments
            ++openfile vs --openfiles for proxy.resources
    # TODO: plugin_id class?
        has package, plugin attributes
        __str__, __repr__ returns package.plugin
        will need to be able to hash it for dictionary keys
    # TODO: chop off extraneous stack items in an function stack
        #BP:                      File "/home/endavis/bastproxy-py3/libs/tracking/utils/attributes.py", line 17, in __setattr__
        #BP:                        self._attribute_set(name, original_value, value)
        #BP:                      File "/home/endavis/bastproxy-py3/libs/tracking/utils/attributes.py", line 29, in _attribute_set
        #BP:                        self._onchange__all(name, original_value, new_value)
        #BP:                      File "/home/endavis/bastproxy-py3/libs/records/rtypes/base.py", line 73, in _onchange__all
        #BP:                        self.addupdate('Modify', f"{name} attribute changed", extra={'original':original_value, 'new':new_value})

# DONE
    # COMPLETE: libs.api
        COMPLETE: add an api to add an event to core.events
        class should hold everything including args
        see libs.events and plugins.core.events:add:event
        COMPLETE: add stats cmd to apihelp for parents with a ':' in the name
        COMPLETE: make @api decorator to add api items
            see how commands are added with decorators
            I don't think this will work since APIs are added at runtime with instance methods
                and decorators are added at compile time
            args would be a name
            it would instrospect the function
                if it finds a plugin in the next stack up, it would add it through that plugin
            if not
                it would add it by the argument
            error checking to see if the function is not already in the api
        COMPLETE: change
                #BP:    setting.get                    - # get the value of a setting
                #BP:         - added in plugins.core.proxy  - called 24 time
            to be something like
                #BP:    plugins.core.proxy:setting.get - called 24 times
                            # get the value of a setting
        COMPLETE: change apis to be listed alphabetically
    # COMPLETE: libs.records
        COMPLETE: keep up with the last (important) record created (ToClientRecord, ToMudRecord, EventArgsRecord, CmdArgsRecord, LogRecord)?
            keep up with it in RecordManager and add related records before it changes?
        COMPLETE: change record addchange to addupdate, refactor to update
        WONTDO: convert all the record types to be fronted by a Factory - https://pravash-techie.medium.com/python-start-using-factory-pattern-design-323c743c0a49
        COMPLETE: add an ToMudRecord to track stuff through execute
    # COMPLETE: plugins.core.log
        COMPLETE: on shutdown clean unused log types
        COMPLETE: look at log file and saving all logging types, only toggle and show toplevel loggers
    # COMPLETE: plugins._baseplugin.py
        COMPLETE: change self.save_directory to self.data_directory
        COMPLETE: added a auto_initialize_f flag
        COMPLETE: remove ability for setting.* apis in _baseclass to take plugin argument
        COMPLETE: remove overloading api:add in baseclass
        COMPLETE: change api to only have 1 ':', change all other ":" to "."
        COMPLETE: check into using __init_subclass__ (used this for api decorators)
        COMPELTE: init with a PluginPackageObject instead of copying it all into the plugin
    # COMPLETE: plugins.core.events
        COMPLETE: register to multiple events with decorator
        COMPLETE: implement stack for saving current event record in raise for get.current.event.record
        COMPLETE: instead of passing around event_args
            created two apis: plugins.core.events:get:current:event:name
                            plugins.core.events:get:current:event:record
        COMPLETE: add all events to a timeline
            or create an api to start tracking all events and stop tracking all events
            see variable all_event_stack in events plugin
    # COMPLETE: plugins.core.pluginm
        COMPLETE: in pluginm.list make required plugins blue
        COMPLETE: move plugin manager to a separate file and out of plugins/__init__.py
        COMPLETE: Combine PluginPackageInfo and LoadedPluginInfo
            add short_name to PluginPackageInfo
            PluginPackageInfo can have a
                "Active Plugin" item that contains
                    the module, the plugin instance, imported_time, isimported, isinitialized
        COMPLETE: refactor paths
            need only 3
                plugin_init_file_path - points to __init__.py
                plugin_package_path - points to package directory
                full_import_location - used for importing (equivalent to plugin_id in current implementation)
        COMPLETE: move plugin loading/import/instantiation/initializing machinery into libs
            only have apis, commands, event cb, etc in the plugin itself
        COMPLETE: check if self.auto_initialize_f = False is needed now that plugin initialization
            has changed
        COMPLETE: BUG - core.plugin.list -n doesn't work
    # COMPLETE: plugins.core.inspect
        COMPLETE: rename profile plugin to audit or inspect?
        COMPLETE: add count for RecordTypes in list command
        COMPLETE: add an inspect method that calls a specific plugins inspect command
    # COMPLETE: plugins.core.commands
        COMPLETE: change execute to only send to the client that executed the command if internal
        COMPLETE: decorator for adding commands
            see libs/commands.py
            the decorator includes the various info as attributes on the function
            the command plugin looks for any functions that start with _command_ in the instance and
                any instance attributes (1 level down)
        COMPLETE: create an api in commands to remove .plugins from a command string
            see : plugins.core.commands:get.command.format
            or an api for get command string(plugin_id, command)
            See:
                #BP: You are now logged in.
                #BP: ------------------------------------------------
                #BP: Please set the mudhost.
                #BP: #bp.plugins.core.proxy.set mudhost 'host'
                #BP: ------------------------------------------------
                #BP: Please set the mudport.
                #BP: #bp.plugins.core.proxy.set mudport 'port'
                #BP: ------------------------------------------------
                #BP: Conect to the mud with #bp.plugins.core.proxy.connect
                #BP: ------------------------------------------------
                #BP: The proxy password is still the default password.
                #BP: Please set the proxy password!
                #BP: #bp.plugins.core.proxy.proxypw 'This is a password'
                #BP: ------------------------------------------------
                #BP: The proxy view password is still the default password.
                #BP: Please set the proxy view password!
                #BP: #bp.plugins.core.proxy.proxypwview 'This is a view password'
                #BP: ------------------------------------------------
        WONTFIX: convert commands to be subparsers of a global parser for each plugin
            this would break the way that we use fuzzy to find things
        COMPLETE: convert commands to be a Class
        WONTFIX: required arguments don't work right
            see:  #bp.core.inspect.list
            WONTFIX: commands must check for argument existence since exit_on_error
                is turned off for argument parsing
        COMPLETE: convert command callbacks to do something similar to what events does for event_args
            create an api get.current.command.args
        COMPLETE: Add arguments to output of command automatically
            #BP: #bp.core.proxy.inspect arg_list
            #BP: --------------------  Arguments ----------------------------------------------------
            #BP: Arguments:
            #BP:    Arg 1:
            #BP:    Arg 2:
            #BP: ------------------------- Output ------------------------------------------------
            #BP: output
            #BP: output
        COMPLETE: BUG: reloading plugins.core.commands
            reset command is not readded for other plugins
    # COMPLETE: plugins.core.sqldb
        COMPLETE: add function to list tables
    # COMPLETE: plugins.core.timers
        WONTFIX - convert timers to asyncio tasks
            Is it easier to manage the timers through a single task or have to keep up with
                multiple tasks?
                4/3/2023 - Decided Yes :) could change.
            Can I use asyncio to schedule a task to happen at a particular time?
            New Timer:
                figure out the first time it should fire and add it to an instance attribute (self.next_fire_time)
                the execute function would look something like this
                    while self.enabled:
                        await asyncio.sleep(self.next_fire_time - now)

                        # run the function associated with the timer

                        # figure out the next time to fire and set self.next_fire_time
    # COMPLETE: plugins.core.ssc
        divorce the setting from having to lookup the plugin_instance
        pass data_directory and plugin_id
    # COMPLETE: plugins.core.clients
        COMPLETE: add banned clients to a command
            added ban command to plugin
        COMPLETE: save permanently banned clients
    # COMPLETE: baseplugin
        # TODO: refactor all initialization to use hooks instead of the initialize function
            use a priority system
        # BUG: uninitialize event is not being called on reload
        # TODO: change stats hook to stats event, same with reset hook
    # COMPLETE: research why the initialize function takes so long
            get_caller_owner_id was optimized and no longer uses inspect.stack
    # COMPLETE: add profiling as a command line argument
    # COMPLETE: refactor different function names to be consistent
        COMPLETE: commands are _command_*
        COMPLETE: apis are _api_*, all api function calls should go through the api
        COMPLETE: events are _eventcb_*
    # COMPLETE: decorator for event registration
    # COMPLETE: don't pass objects in event args (like Records, Commands, etc)
        retrieve the object through an api using an id
        # COMPLETE : Event Args, Command Args
    # COMPLETE: break up plugins into multiple files under a single save_directory
        Example: the core.commands plugin would be a folder commands under the core folder under the plugins folder
            Need to figure out how to search this without looking for a Plugin object in all files
            maybe in __init__, put the standard plugin header files
            don't search for .py files, but search for packages?
        will need to change the way info.isvalidpythoncode = True works
        # NOTE: reloading plugins does not update any objects that have been imported by another plugin,
            try to keep imports into other plugins at a minimum
                one such item is a decorator that is used by other plugins, if the module the decorator exists in is reloaded
                then all the other modules that have used that decorator will have the old decorator and they will have references
                to the old module, meaning the old module will never be garbage collected until all those other modules have been reloaded.
        # COMPLETE: search for __name__ and refactor
    # COMPLETE: move fuzzy matching plugin names from commands to pluginloader??? add an api to do it?
    # COMPLETE: plugins.core.settings
        move all settings to a central plugin?
                or just add a plugin to interact with all settings?
            what would this break in __init__ or initializing?
                would setting:add have to move to initialize?
                do any plugins use setting:get in __init__ or initialize?
            monkeypatch baseplugin with the __command__set function?
    # COMPLETE: change api to use instance instead of overload
        enforce that there cannot be two apis with the same name in ANY case
    # COMPLETE: BUG: - Command: #bp.c
        #BP: 2023-11-12 21:18:33,200 UTC : ERROR     - plugins.core.commands  - raise_event - event ev_to_mud_data_modify with function _eventcb_check_for_command raised an exception
        #BP: Traceback (most recent call last):
        #BP:   File "/home/endavis/bastproxy-py3/libs/event.py", line 259, in raise_event
        #BP:     event_function.execute()
        #BP:   File "/home/endavis/bastproxy-py3/libs/callback.py", line 46, in execute
        #BP:     return self.func()
        #BP:            ^^^^^^^^^^^
        #BP:   File "/home/endavis/bastproxy-py3/plugins/core/commands/_commands.py", line 795, in _eventcb_check_for_command
        #BP:     self.run_internal_command_from_event()
        #BP:   File "/home/endavis/bastproxy-py3/plugins/core/commands/_commands.py", line 746, in run_internal_command_from_event
        #BP:     command_item, command_args, show_in_history, notes, message = self.find_command(event_record['line'])
        #BP:                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #BP:   File "/home/endavis/bastproxy-py3/plugins/core/commands/_commands.py", line 605, in find_command
        #BP:     found, new_package, new_plugin, tmessage, command_split, command_args = self.find_command_split_command_string(command_str)
        #BP:                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #BP:   File "/home/endavis/bastproxy-py3/plugins/core/commands/_commands.py", line 709, in find_command_split_command_string
        #BP:     plugin_id_temp_str = f"{command_split[0]}.{command_split[1]}"
        #BP:                                                ~~~~~~~~~~~~~^^^
        #BP: IndexError: list index out of range
    # COMPLETE: stats command throws an exception
    # COMPLETE: move libs.event into plugins.core.events? same for commands and colors?
        I don't think the decorators would ever be reloaded because all the plugins use them
        Anything used in _baseplugin cannot be moved into a plugin because
            of circular imports
            @AddCommand is an example
    # COMPLETE: proxy usage command with mem, average cpu, open files, etc...
        pympler?
    # COMPLETE: create a command to show hooks in a plugin
    # COMPLETE: plugin reloading
        # DONE: add a function internal to the plugin to save it's state in a dictionary or copy it into the new instance?
            see self.attributes_to_save_on_reload usage in baseplugin
        # DONE: check refcounts to see what is still used
    # COMPLETE: move all the debug stuff into a single package
        inspect, stats, data/internal, hooks command
        created a new package called debug
            moved apihelp to plugins.debug.api
            moved inspect to plugins.debug.records
            created new plugin called plugins and moved dump into it
        move plugin hooks debugging into plugins.debug.plugins
    # COMLPETE: BUG: #bp.d does not list plugins in package
        it finds the plugins.debug.api plugin
    # COMPLETE: BUG: listing records
        #bp.d.rec.list EventArgsRecord
        #BP: 2023-12-13 15:29:32,047 UTC : ERROR     - plugins.debug.records  - Error running command: #bp.debug.records.list EventArgsRecord
        #BP: Traceback (most recent call last):
        #BP:   File "/home/endavis/bastproxy-py3/plugins/core/commands/libs/_command.py", line 72, in run
        #BP:     return_value = self()
        #BP:                    ^^^^^^
        #BP:   File "/home/endavis/bastproxy-py3/plugins/core/commands/libs/_command.py", line 243, in __call__
        #BP:     return self.function(*args, **kwargs)
        #BP:            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        #BP:   File "/home/endavis/bastproxy-py3/plugins/debug/records/plugin/_records.py", line 63, in _command_list
        #BP:     tmsg.extend([f"{record.uuid} - {record.original_data[0].strip()} ..." for record in records])
        #BP:                                     ~~~~~~~~~~~~~~~~~~~~^^^
        #BP: KeyError: 0
    # COMPLETE: refactor settings/_patch_base
        convert to _phook_settings_uninitialize to use the plugin_unitialized event
        convert _eventcb_raise_event_all_settings to use the plugin_initialized event
    # COMPLETE: refactor all saving
        only use pluginhooks for internal data
        convert external saving to events
            settings plugin _patch_base _phook_settings_save
    # COMPLETE: create a command to show basic stats for a plugin
        For things:
            # DONE: all events that have registered functions from the plugin
            # DONE: all commands that are from the plugin
            # DONE: all timers that are from the plugin
       # DONE:  move to plugins.debug.plugins
    # COMPLETE: move pluginloader, info/plugins, , dependency, imputils, reloadutils into libs/plugin
    # COMPLETE: (see NetworkData and NetworkDataLine) create a OutputLine/DataLine Record
         - based on ToClientLine
         - add all formatting to this record
         - cast every line that is to go to a client or to the mud in this record
                - Look at command output which goes through ToClientRecord
                - Look at ToMudRecord
                - Maybe do this at the net level?
    # COMPLETE: BUG: plugins that are reloaded are not automatically loaded on next start
    # COMPLETE: BUG: mud connections are not being cleaned up (or new ones are being used)
    # COMPLETE: TODO: command to see all tasks in the asyncio event queue
            see plugins.debug.async.tasks
    # COMPLETE: TODO: records.get_all_children use object instead of uuid_string to build
        also use the actual record object instead of the uuid_string in the returned dict
        get_all_children_dict
        get_children
    # COMPLETE: TODO: move all records under their owning plugin, only keep base types in libs.records
            move baserecord to just under records, get everything out of rtypes
    # COMPLETE: TODO: in add update, find relevant code entry
        not relevant:
            addupdate
            AttributeMonitor stuff
            TrackedUserList stuff
    # COMPLETE: BUG: get_all_records not return all records
        fixed when parents were refactored
    # COMPLETE: refactor sending/receiving
        client
            COMPLETE: modify client.write to only send x # of lines before doing an asyncio.sleep(0)
            COMPLETE: modify client.read to read x # of lines like mud.read
                Still process 1 at a time, just do a sleep when we've processed max_lines_to_process
        mud
            COMLETE: modify mud.write to only send x # of lines before doing an asyncio.sleep(0)
            COMPLETE: modify mud.read to read x # of lines


# REJECTED/OLD
    # OLD: plugin reloading
        Reloading Single Plugins:
            # Commands are kept in the plugin and then the command plugin can get them specific to api call for each plugin instead of them being stored in the command plugin
            # the idea
                attach to the plugin_loaded and plugin_unloaded event and update command list when seen
                how to be able to call the api for each plugin to get its commands?
            # could this be used for all plugins?, pull from source plugin vs push to action plugin (commands, triggers, etc)
            # and then plugins could be reloaded much easier
            # Plugins done: core.commands
            OLD Thoughts:
                Reloading plugins (see above about commands plugin):
                    #NEW save data to the specific plugin, so command data goes into each plugin instead
                    #NEW of the command plugin, then the command plugin registers to the initialize and
                    #NEW and uninitialize events to update it's local caches, data, etc..
    # REJECTED: decorator for event description
        put it on the function that actually raises the event
        kinda hard to do for a function/method that raises a dynamically named event since
            the function will be in every plugin
    # REJECTED: plugin reloading
        I am leaning away from doing this, it's just easier to restart the proxy and reconnect
            do we just have reload and start from scratch but keep connections?
                can we reload everything and just get connections back into async?
            for all ? reload entire proxy but keep connections open?
                save clients and mud connection
                unload all plugins
                    clearing APis for that plugin
                    clearing events
                    remove all async tasks related to a plugin
                    can we use importlib.reload?
                reload all files in plugins/*
                don't reload libs/*
                    need to check to make sure libs/* only uses APIs and doesn't statically
                        import anything from a plugin
